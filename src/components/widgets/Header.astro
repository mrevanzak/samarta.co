---
import Logo from '@/components/Logo.astro';
import ToggleMenu from '@/components/common/ToggleMenu.astro';
import ToggleTheme from '@/components/common/ToggleTheme.astro';
import Button from '@/components/ui/Button.astro';
import { Icon } from 'astro-icon/components';

import type { CallToAction } from '@/types';
import { getAsset, getHomePermalink, trimSlash } from '@/utils/permalinks';
interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<CallToAction>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = 'header',
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
---

<header
  class:list={[
    { relative: !isSticky, dark: isDark },
    'fixed top-0 z-40 mx-auto w-full flex-none border-b border-gray-50/0 transition-[opacity] ease-in-out',
  ]}
  {...isSticky ? { 'data-aw-sticky-header': true } : {}}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0"></div>
  <div
    class:list={[
      'relative mx-auto w-full px-3 py-3 md:flex md:gap-10 md:px-6',
      {
        'max-w-7xl': !isFullWidth,
      },
    ]}
  >
    <div class="flex flex-1 justify-between lg:flex-initial">
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo />
      </a>
      <div class="flex items-center md:hidden">
        <ToggleMenu />
      </div>
    </div>
    <div class="flex flex-1 justify-between md:rounded-full md:bg-background md:p-4 2xl:p-2.5">
      <nav
        class="mt-6 hidden overflow-y-auto overflow-x-hidden text-default md:mt-0 md:flex md:w-auto md:justify-self-center md:overflow-x-auto md:overflow-y-visible"
        aria-label="Main navigation"
      >
        <ul class="h4 flex w-full flex-col gap-2 tracking-[0.01rem] md:w-auto md:flex-row md:justify-center">
          {
            links.map(({ text, href, links }) => (
              <li class={links?.length ? 'dropdown' : ''}>
                {links?.length ? (
                  <a>
                    <a
                      type="button"
                      class="hover:text-link flex items-center whitespace-nowrap rounded-lg px-5 py-1.5 transition duration-200 ease-in hover:bg-primary/20 dark:hover:text-white md:rounded-full"
                      href={href}
                    >
                      {text}{' '}
                      <Icon
                        name="tabler:chevron-down"
                        class="ml-0.5 hidden h-3.5 w-3.5 md:inline rtl:ml-0 rtl:mr-0.5"
                      />
                    </a>
                    <ul class="dropdown-menu rounded-lg pl-4 font-medium drop-shadow-xl md:absolute md:hidden md:min-w-[200px] md:bg-background md:pl-0 md:backdrop-blur-md">
                      {links.map(({ text: text2, href: href2 }) => (
                        <li>
                          <a
                            class:list={[
                              'hover:text-link whitespace-no-wrap h4 block px-5 py-2 font-normal transition duration-200 ease-in first:rounded-t-lg last:rounded-b-lg hover:bg-primary/20',
                              { 'bg-primary font-semibold text-broken-white': href2 === currentPath },
                            ]}
                            href={href2}
                          >
                            {text2}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </a>
                ) : (
                  <a
                    class:list={[
                      'hover:text-link flex items-center whitespace-nowrap rounded-lg px-5 py-1.5 transition duration-200 ease-in hover:bg-primary/20 md:rounded-full',
                      { 'bg-primary font-semibold text-broken-white': href === currentPath },
                    ]}
                    href={href}
                  >
                    {text}
                  </a>
                )}
              </li>
            ))
          }
        </ul>
      </nav>
      <div
        id="toggle-theme-container"
        class:list={[
          'fixed bottom-0 left-0 w-full items-center justify-end p-3 md:static md:mb-0 md:w-auto md:self-center md:justify-self-end md:p-0 lg:flex rtl:left-auto rtl:right-0',
        ]}
      >
        <div class="flex w-full items-center justify-between md:w-auto">
          <div class="flex">
            {showToggleTheme && <ToggleTheme iconClass="w-6 h-6 md:w-5 md:h-5 md:inline-block" />}
            {
              showRssFeed && (
                <a
                  class="inline-flex items-center rounded-lg p-2.5 text-sm text-muted hover:bg-gray-100 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-700"
                  aria-label="RSS Feed"
                  href={getAsset('/rss.xml')}
                >
                  <Icon name="tabler:rss" class="h-5 w-5" />
                </a>
              )
            }
          </div>
          {
            actions?.length ? (
              <span class="ml-4 rtl:ml-0 rtl:mr-4">
                {actions.map((btnProps) => (
                  <Button {...btnProps} class="px-5.5 ml-2 w-auto py-2.5 text-sm font-semibold shadow-none md:px-6" />
                ))}
              </span>
            ) : (
              ''
            )
          }
        </div>
      </div>
    </div>
  </div>
</header>
